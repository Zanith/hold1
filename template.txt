%%import statement%%

%%states%%

%%ions%%
q_charge = 1.602e-19


def eyring_rate_algo(voltages, ion_conc, energy_barriers, Qs=None, Rs=1, mp_dps=15):
    %%mp.dps statement%%
    if not Qs:
        Qs = [1]
    results_eig = []
    results_svd = []
    results_qr = []
    for voltage in voltages:
        print 'voltage: ', voltage

        # 1: make the transition matrix
        trans_matrix = eyring_rate_matrix(voltage, ion_conc, energy_barriers, Qs, Rs)

        result_eig, result_svd, result_qr = helper.solve_eyring_rate_model(voltage, trans_matrix)

        results_eig.append(result_eig)
        results_svd.append(result_svd)
        results_qr.append(result_qr)

    return results_eig, results_svd, results_qr


def convert_mp_int(_vector):
    int_vector = []
    for num in _vector:
        int_vector.append(num)
    return int_vector


def eyring_rate_matrix(voltage, ion_concs, energy_barriers, Qs, Rs):
    k0 = 6.1*10**12
    V = voltage
    q = 1/25.  # unit is e- / kT

%%ion assignment%%

%%global Q%%

%%Q assignment%%

%%distance assignment%%

%%energy barriers%%

%%global rates%%

%%ion rates%%

    transition_matrix = %%transition matrix%%

    return transition_matrix


def eyring_rate_transport(steady_state):

%%transport rates%%

    transport_rate = dict()
    for ion in ions:
        transport_rate[ion] = []

        for i in range(len(inward.values()[0])):
            transport_rate[ion].append((outward[ion][i].real - inward[ion][i].real))

    return transport_rate


def current_calc(transport_rates):
    """
    Calculate the current for each barrier using the ion transport rates
    :param transport_rates:  dictionary of ions (as keys) with list of rates as values
    :return: dictionary of currents (in picoamps) caused by each ion and the 'total' current
    """
    all_currents = []
    # get number of barriers by looking at a transport value
    num_barriers = len(transport_rates[transport_rates.keys()[0]])
    for barrier in range(num_barriers):
        current = 0
        for ion in ions:
            # calcuate current as the ion charge (coulomb) times the transport rate (per second)
            current += ion_charges[ion] * q_charge * 10**12 * transport_rates[ion][barrier]  # 10e12 is to convert to picoamps
        all_currents.append(current)
    return all_currents